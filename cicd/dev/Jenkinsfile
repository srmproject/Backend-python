pipeline {
    agent any
    environment {
        MODE = "dev"
        WEBHOOK_URL = credentials("DISCORD_WEBHOOK")
    }
    stages {
        stage('alarm') {
            steps {
                discordSend description: "job이름: ${env.JOB_BASE_NAME}",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "젠킨스 잡이 실행되었습니다.",
                            webhookURL: env.WEBHOOK_URL
            }
        }
        stage('pre build') {
            steps {
                sh "rm -rf ./Dockerfile"
                sh "cp ./cicd/dev/Dockerfile ./Dockerfile"
                script {
                    tag = sh(script: "echo ${env.BUILD_NUMBER} | tr -d \'\\n\'", returnStdout: true)
                    docker_image_name = sh(script: "echo ${env.JOB_BASE_NAME} | tr -d \'\\n\'", returnStdout: true)
                }
            }
        }
        stage('print prebuild') {
            steps {
                echo "dockerimage:tag ${docker_image_name}:${tag}"
            }
        }
        stage('docker build and push') {
            steps {
                script {
                    docker.withRegistry("http://${REGISTRY}", "NEXUS_DOCKER_ID")  {
                        script {
                            customimage = docker.build "${docker_image_name}:${tag}"
                            customimage.push()
                            sh(script: "docker rmi ${REGISTRY}/${docker_image_name}:${tag}", returnStdout: true)
                        }
                    }
                }
            }
        }
        stage('checkout cicd branch') {
            steps {
                git branch: 'cicd', url: 'https://github.com/srmproject/Backend-python.git'
            }
        }
        stage('change image:tag') {
            steps {
                dir("dev") {
                    tmp_image_name="${REGISTRY}/${docker_image_name}" yq -i '.images[0].newName = env(tmp_image_name)' kustomization.yaml

                    withCredentials([sshUserPrivateKey(credentialsId: "JCP-FRONTEND-CORE-SSHKEY", keyFileVariable: "SSH_KEY")]) {
                        sh """
                            mkdir -p ~/.ssh
                            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                            git add kustomization.yaml

                            git config --local user.email "myjenkins@admin.com"
                            git config --local user.name "jenkins"
                            git commit --allow-empty -m 'change image:tag'

                            git remote -v
                            git remote add target git@github.com:srmproject/Backend-python.git
                            GIT_SSH_COMMAND="ssh -i $SSH_KEY" git push target cicd
                            git remote remove target
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            discordSend description: "job이름: ${env.JOB_BASE_NAME}",
                        link: env.BUILD_URL, result: currentBuild.currentResult,
                        title: "job이 성공했습니다.",
                        webhookURL: env.WEBHOOK_URL
        }
        failure {
            discordSend description: "job이름: ${env.JOB_BASE_NAME}",
                        link: env.BUILD_URL, result: currentBuild.currentResult,
                        title: "job이 실패했습니다.",
                        webhookURL: env.WEBHOOK_URL
        }
    }
}